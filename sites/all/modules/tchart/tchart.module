<?php

module_load_include('inc', 'tchart', 'includes/tchart_commons');
module_load_include('inc', 'tchart', 'includes/tchart_query');
module_load_include('module', 'echarts');

/**
 * Implements hook_menu().
 */
function tchart_menu()
{
    $items = array();
    $items['taxonomy/term/%taxonomy_term'] = array(

        'title' => 'Taxonomy show',
        'description' => '设置',
        'page callback' => 'taxonomy_show',      //将会回调这个方法
        'page arguments' => array(2),
        'access arguments' => array('access content'),
//        'type'=>MENU_NORMAL_ITEM,
    );
    $items['taxonomy/term/%taxonomy_term/report/%'] = array(

        'title' => 'Taxonomy report',
        'description' => '设置',
        'page callback' => 'taxonomy_report',      //统计分析报告专用
        'page arguments' => array(2, 4),
        'access arguments' => array('access content'),
//        'type'=>MENU_NORMAL_ITEM,
    );
    $items['admin/structure/tchart'] = array(
        'title' => 'Taxonomy display',
        'description' => '设置想要展示的Taxonomies',
        'page callback' => 'drupal_get_form',      //将会回调这个方法
        'page arguments' => array('tchart_vocabulary_form'),
        'access arguments' => array('access administration pages'),
    );
    $items['admin/structure/tchart/ses'] = array(
        'title' => 'Taxonomy display',
        'description' => '设置想要展示的Taxonomy',
        'page callback' => 'drupal_get_form',      //将会回调这个方法
        'page arguments' => array('tchart_term_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_LOCAL_TASK,
    );
    $items['admin/structure/tchart/select'] = array(
        'title' => 'Taxonomy select22222',
        'description' => '设置ddd22222222',
        'page callback' => 'drupal_get_form',      //将会回调这个方法
        'page arguments' => array('tchart_forms'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_LOCAL_TASK,
    );
    return $items;

}

/**
 * Implements hook_form().
 */
//function tchart_forms($node, &$form_state)
//{
//    $form['current_post_max/aaa'] =array(
//        '#type'=>'textfield',
//        '#title'=>t('Maximum number of posts'),
//        '#default_value'=>variable_get('current_post_max',3),
//        '#size'=>2,
//        '#maxlength'=>2,
//        '#description'=>t('the maximum of numbers display in the block'),
//        '#required'=>TRUE,
//    );
//    $form['current_post_max2'] =array(
//        '#type'=>'textfield',
//        '#title'=>t('Maximum number of posts'),
//        '#default_value'=>variable_get('current_post_max',3),
//        '#size'=>2,
//        '#maxlength'=>2,
//        '#description'=>t('the maximum of numbers display in the block'),
//        '#required'=>TRUE,
//    );
//    return system_settings_form($form);
//}

/**
 * 选择需要展示的vocabularies
 */
function tchart_vocabulary_form()
{
    $vocabularies = taxonomy_vocabulary_load_multiple(FALSE);

    foreach ($vocabularies as $vocabulary) {

        if ($vocabulary->vid != 1) {
            $form['tchart_vocabulary_' . $vocabulary->vid] = array(
                '#type' => 'checkbox',
                '#title' => t($vocabulary->name),
                '#default_value' => variable_get('tchart_vocabulary_' . $vocabulary->vid, FALSE),
                '#required' => FALSE,
            );
        }
    }

    return system_settings_form($form);
}

/**
 * 选中term以展示echarts
 */
function tchart_term_form()
{
    $vocabularies = taxonomy_vocabulary_load_multiple(FALSE);

    foreach ($vocabularies as $vocabulary) {
        if (variable_get('tchart_vocabulary_' . $vocabulary->vid, FALSE)) {
            $form['tchart_vocabulary_mark_' . $vocabulary->vid] = array(
                '#markup' => t($vocabulary->name),
            );
            $terms = taxonomy_term_load_multiple(FALSE, array('vid' => $vocabulary->vid));
            foreach ($terms as $term) {
                $form['tchart_term_' . $term->tid] = array(
                    '#type' => 'checkbox',
                    '#title' => ($vocabulary->name) . get_all_term_parents($term) . '{tid=' . $term->tid . '}',
                    '#default_value' => variable_get('tchart_term_' . $term->tid, FALSE),
                    '#required' => FALSE,
                );
                $form['tchart_show_children_' . $term->tid] = array(
                    '#type' => 'checkbox',
                    '#title' => t('显示子内容'),
                    '#default_value' => variable_get('tchart_show_children_' . $term->tid, FALSE),
                    '#required' => FALSE,
                );
                $form['tchart_show_depth_' . $term->tid] = array(
                    '#type' => 'checkbox',
                    '#title' => t('显示子内容并展示'),
                    '#default_value' => variable_get('tchart_show_depth_' . $term->tid, FALSE),
                    '#required' => FALSE,
                );
                $form['tchart_term_show_photo_' . $term->tid] = array(
                    '#type' => 'checkbox',
                    '#title' => t('只显示图片'),
                    '#default_value' => variable_get('tchart_term_show_photo_' . $term->tid, FALSE),
                    '#required' => FALSE,
                );
                $form['tchart_term_db_' . $term->tid] = array(
                    '#type' => 'textfield',
                    '#title' => t('数据库表'),
                    '#default_value' => variable_get('tchart_term_db_' . $term->tid, 'rainwater_utilization'),
                    '#required' => FALSE,
                );
            }

        }
    }

    if (empty($form)) {
        $form['tchart_no_vocabulary'] = array(
            '#markup' => t('没有分类被选中'),
        );
    }
    return system_settings_form($form);
}

/**
 * 展示echarts或者taxonomy
 */
function taxonomy_show($term)
{
    //加载js
    drupal_add_js(drupal_get_path('module', 'tchart') . '/echarts.common.min.js');

    if (variable_get('tchart_term_db_' . $term->tid, 'rainwater_utilization') == 'groundwater_quality') {
        return taxonomy_report($term);
    }

    // If there is a menu link to this term, the link becomes the last part of
    // the active trail, and the link name becomes the page title. Thus, we must
    // explicitly set the page title to be the term title.
    drupal_set_title($term->name);

    /*    // Build breadcrumb based on the hierarchy of the term.
        $current = (object)array(
            'tid' => $term->tid,
        );
        // @todo This overrides any other possible breadcrumb and is a pure hard-coded
        //   presumption. Make this behavior configurable per vocabulary or term.
        $breadcrumb = array();
        while ($parents = taxonomy_get_parents($current->tid)) {
            $current = array_shift($parents);
            $breadcrumb[] = l($current->name, 'taxonomy/term/' . $current->tid);
        }
        $breadcrumb[] = l(t('Home'), NULL);
        $breadcrumb = array_reverse($breadcrumb);
        drupal_set_breadcrumb($breadcrumb);
        drupal_add_feed('taxonomy/term/' . $term->tid . '/feed', 'RSS - ' . $term->name);*/

    // Set the term path as the canonical URL to prevent duplicate content.
    $uri = entity_uri('taxonomy_term', $term);
    drupal_add_html_head_link(array(
        'rel' => 'canonical',
        'href' => url($uri['path'], $uri['options'])
    ), TRUE);
    // Set the non-aliased path as a default shortlink.
    drupal_add_html_head_link(array(
        'rel' => 'shortlink',
        'href' => url($uri['path'], array_merge($uri['options'], array('alias' => TRUE)))
    ), TRUE);

    // Normally we would call taxonomy_term_show() here, but for backwards
    // compatibility in Drupal 7 we do not want to do that (it produces different
    // data structures and HTML markup than what Drupal 7 released with). Calling
    // taxonomy_term_view() directly provides essentially the same thing, but
    // allows us to wrap the rendered term in our desired array structure.
    $build['term_heading'] = array(
        '#prefix' => '<div class="term-listing-heading">',
        '#suffix' => '</div>',
        'term' => taxonomy_term_view($term, 'full'),
    );


    //如果被选中,则显示echarts
    if (variable_get('tchart_term_' . (string)$term->tid, FALSE) && variable_get('tchart_vocabulary_' . (string)$term->vid, FALSE)) {

//        $settings['echart'] = get_charts($term);
        $charts = get_charts($term);
        $build['content'] = array(
            '#prefix' => '<p>',
            '#markup' => $charts['output'],
            '#suffix' => '</p>',
        );
        $build['conftent'] = $charts['settings'];
    }
    //多图联动
    $build['chart_connect'] = array(
        '#theme' => 'tchart_connect',
    );

    //只显示图片的行为
    if (variable_get('tchart_term_show_photo_' . (string)$term->tid, FALSE)) {

        $photo_nodes = array();
        foreach (tchart_taxonomy_select_nodes($term->tid) as $node) {
            $photo_nodes[] = $node;

        };
        array_unshift($build, array(
            '#theme' => 'tchart_photo_wall',
            '#items' => $photo_nodes,
        ));
        return $build;
    }
    //显示其余文章
    if ($nids = taxonomy_select_nodes($term->tid, TRUE, variable_get('default_nodes_main', 10))) {
        $nodes = node_load_multiple($nids);
        $build += node_view_multiple($nodes);
        $build['pager'] = array(
            '#theme' => 'pager',
            '#weight' => 5,
        );
    } else {
        $build['no_content'] = array(
            '#prefix' => '<p>',
            '#markup' => t(' '),
            '#suffix' => '</p>',
        );
    }


    return $build;

}

function taxonomy_report($term, $select_time = '')
{

    // If there is a menu link to this term, the link becomes the last part of
    // the active trail, and the link name becomes the page title. Thus, we must
    // explicitly set the page title to be the term title.
    drupal_set_title($term->name);
    // Set the term path as the canonical URL to prevent duplicate content.
    $uri = entity_uri('taxonomy_term', $term);
    drupal_add_html_head_link(array(
        'rel' => 'canonical',
        'href' => url($uri['path'], $uri['options'])
    ), TRUE);
    // Set the non-aliased path as a default shortlink.
    drupal_add_html_head_link(array(
        'rel' => 'shortlink',
        'href' => url($uri['path'], array_merge($uri['options'], array('alias' => TRUE)))
    ), TRUE);

    // Normally we would call taxonomy_term_show() here, but for backwards
    // compatibility in Drupal 7 we do not want to do that (it produces different
    // data structures and HTML markup than what Drupal 7 released with). Calling
    // taxonomy_term_view() directly provides essentially the same thing, but
    // allows us to wrap the rendered term in our desired array structure.
    $build['term_heading'] = array(
        '#prefix' => '<div class="term-listing-heading">',
        '#suffix' => '</div>',
        'term' => taxonomy_term_view($term, 'full'),
    );

    //显示报告
    $output = groundwater_quality($term->tid, $select_time);
//    $build[]
    $build['table'] = array(
        '#theme' => 'tchart_report',
        '#items' => $output['items'],
        '#header' => $output['header'],
        '#date' => $output['date'],
    );

    return $build;
}

/**
 * Implements hook_block_info().
 */
function tchart_block_info()
{
    $blocks['side_navigation'] = array(
        'info' => t('Side navigation'),
        //The name that will appear in the block list.
        'cache' => DRUPAL_CACHE_PER_ROLE
        //default
    );

    $blocks['top_navigation'] = array(
        'info' => t('Top navigation'),//The name that will appear in the block list.
        'cache' => DRUPAL_CACHE_PER_ROLE     //default
    );
    $blocks['top_secondary_navigation'] = array(
        'info' => t('Top secondary navigation'),
        //The name that will appear in the block list.
        'cache' => DRUPAL_CACHE_PER_ROLE
        //default
    );
    $blocks['login_bar'] = array(
        'info' => t('Login bar'),
        //The name that will appear in the block list.
        'cache' => DRUPAL_CACHE_PER_ROLE
        //default
    );
    return $blocks;
}


/**
 * Implements hook_block_view().
 */
function tchart_block_view($delta = '')
{

    switch ($delta) {
        case 'top_secondary_navigation':
        case 'side_navigation':
            $page_term = get_page_term();
            $tid = $page_term['tid'];
            $vid = $page_term['vid'];
            if (!variable_get('tchart_vocabulary_' . $vid, FALSE)) {
                break;
            }
            if (user_access('access content')) {
                $depth = 3;
                global $tchart_cache_content;
                print_r($tchart_cache_content);
//                watchdog('test', '='.$tchart_cache_content['items'].'=');
                //unset term except #4
//                if(!empty($tchart_cache_content['items'][3]) && is_array($tchart_cache_content['items'][3])) {
//                    foreach ($tchart_cache_content['items'][3] as $k => $v) {
//                        if(!empty($v) && is_array($v['data'])) {
//                            foreach ($v as $key => $val) {
//                                if(!empty($val) && is_array($val)) {
//                                    foreach($val as $kk => $value) {
//                                        if(array_key_exists('title', $val)) {
//                                            // if title contains 区域 and it's 4# then keeps it.
////                                            watchdog('test', '='.strpos($val['title'], "区域").'=');
//                                            if (($val['title'] != "4#区域") && (strpos($val['title'], "区域") > 0) ) {
//                                                unset($tchart_cache_content['items'][3][$k]);
//                                                continue;
//                                            }
//                                        }
//                                    }
//                                }                               
//                            }
//                        }
//                    }
//                }
                
                if (!isset($tchart_cache_content)) {
                    tchart_get_block_content($tid, $depth);
                }
                if ($delta == 'side_navigation') {
                    $block['content'] = tchart_render_navigation($tchart_cache_content['items'][1], $tchart_cache_content['active'], '海绵城市考核指标');
                    $block['content'] .= tchart_render_navigation($tchart_cache_content['items'][3], $tchart_cache_content['active'], _get_check($tchart_cache_content['items'][2], $tchart_cache_content['active']));
                } else {
                    $block['content'] = tchart_render_navigation($tchart_cache_content['items'][2], $tchart_cache_content['active'], '', 'tchart_nav_button', 'tid');
                }

                return $block;
            }
            break;

        case 'top_navigation':
            if (user_access('access content')) {
                $page_term = get_page_term();
                $tid = $page_term['tid'];
                $vid = $page_term['vid'];


                $items = array();
                $active = array();
                if ($tid >= -1) {
                    $active = array($vid);
                }

                $vocabularies = taxonomy_vocabulary_load_multiple(FALSE);
                //加上首页
                $items[] = array(
                    'data' => array('title' => t('Home'), 'link' => ''),
                    'vid' => -1,
                );
                //加上其他页
                foreach ($vocabularies as $vocabulary) {
                    if (variable_get('tchart_vocabulary_' . $vocabulary->vid, FALSE)) {
                        $single_terms = taxonomy_get_tree($vocabulary->vid);
                        if (!empty($single_terms)) {
                            $items[] = get_vocabulary_renderable_array($single_terms[0], 2, $vocabulary->name, $vocabulary->vid, 'vid');
                        } else {
                            $items[] = array(
                                'data' => $vocabulary->name,
                                'vid' => $vocabulary->vid,
                            );
                        }
                    }
                }
                if (empty($items)) {
                    $block['content'] = t('no post avaliable');
                } else {
                    $output = '';
                    $output .= theme('tchart_top_nav', array(
                        'items' => $items,
                        'active' => $active
                    ));
                    $block['content'] = $output;
                }


                return $block;
            }
            break;
        case 'login_bar' :  //登录bar,editor系统跳转
            $block = array();
            if (user_is_logged_in()) {
                //如果登录了
                $block['content'] = '<span>' . l(t('My account'), drupal_get_path_alias('user')) . '</span>&nbsp;&nbsp;<span>' . l(t('Log out'), drupal_get_path_alias('user/logout')) . '</span>';
            } else {
                //如果未登录
                $block['content'] = '<span>' . l(t('User login'), drupal_get_path_alias('user/login')) . '</span>&nbsp;&nbsp;<span>' . l(t('Create new account'), drupal_get_path_alias('user/register')) . '</span>';
            }

            return $block;
            break;
        
    }

}


/**
 * Implements hook_theme().
 */
function tchart_theme($existing, $type, $theme, $path)
{
    return array(
        'tchart_side_nav' => array(
            'variables' => array(
                'items' => NULL,
                'title' => NULL,
                'active' => array(),
                'type' => 'ul',
                'attributes' => array(),
            ),
        ),
        'tchart_top_nav' => array(
            'variables' => array(
                'items' => NULL,
                'title' => NULL,
                'active_id' => 'vid',
                'active' => array(),
                'type' => 'ul',
                'attributes' => array(),
            ),
        ),
        'tchart_report' => array(
            'variables' => array(
                'items' => NULL,
                'header' => NULL,
                'date' => array(),
                'attributes' => array(),
            ),
        ),
        'tchart_time_chart' => array(
            'variables' => array(
                'title' => '',
                'items' => NULL,
                'legend' => NULL,
                'unit' => array('unit' => '', 'per' => ''),
                'date' => array(),
                'attributes' => array(),
            ),
        ),
        'tchart_time_chart2' => array(
            'variables' => array(
                'items' => NULL,
                'title' => NULL,
                'height' => NULL,
                'category' => NULL,
                'option' => array(),
                'date' => NULL,
                'attributes' => array(),
            ),
        ),
        'tchart_nav_button' => array(
            'variables' => array(
                'items' => NULL,
                'title' => NULL,
                'active_id' => 'vid',
                'active' => array(),
                'type' => 'ul',
                'attributes' => array(),
            ),
        ),
        'tchart_photo_wall' => array(
            'variables' => array(
                'items' => NULL,
                'image_style' => 'photo_wall',
                'attributes' => array(),
            ),
        ),
        'tchart_video_report' => array(
            'variables' => array(
                'video' => array(),
                'form' => array(),
            ),
        ),
        'tchart_connect' => array(
            'variables' => array(),
        ),
    );
}

/**
 * 侧边导航样式
 */
function theme_tchart_side_nav($variables)
{
    $items = $variables['items'];
    $title = $variables['title'];
    $type = $variables['type'];
    $active = $variables['active'];
    $attributes = $variables['attributes'];

    //测试:深层array
//  if($items[0]['tid']==40){
//	$items[0]['children']=array(array('data'=>l('hehehe','/taxonomy/term/77'),'tid'=>40,'children'=>array(array('data'=>l('hehehe','/taxonomy/term/444'),'tid'=>892))));
//  }
//  print_r($items);

    // Only output the list container and title, if there are any list items.
    // Check to see whether the block title exists before adding a header.
    // Empty headers are not semantic and present accessibility challenges.
    $level = 1;
    $output = '<ul>';

    if (isset($title) && $title !== '') {
        $output .= '<li class="level-' . $level . '">' . $title . '<div class="array"></div></li>';
    }

    $level++;
    $output .= tchart_get_rendered_side_nav($attributes, 'tid', $active, $items, $level);

    $output .= '</ul>';
    return $output;
}

/**
 * 左侧递归输出li菜单
 */
function tchart_get_rendered_side_nav($attributes, $active_id, $active, $items, $level)
{
    $output = '';
    if (!empty($items)) {

        foreach ($items as $item) {
            $act_attributes = array();
            $data = $item['data'];

            //如果是本term或者父term则添加类active
            $act_attributes['class'][] = 'level-' . $level;
            if (in_array($item[$active_id], $active)) {
                $act_attributes['class'][] = 'active';
            }
            $act_attributes += $attributes;
            $output .= '<li ' . drupal_attributes($act_attributes) . '>' . l($data['title'], $data['link']) . "</li>\n";
            //存在子目录则继续渲染
            if (key_exists('children', $item)) {
                $output .= tchart_get_rendered_side_nav($attributes, $active_id, $active, $item['children'], $level + 1);
            }
        }
    }
    return $output;
}

/**
 * 上方导航样式
 */
function theme_tchart_top_nav($variables)
{
    $items = $variables['items'];
    $title = $variables['title'];
    $type = $variables['type'];
    $active_id = $variables['active_id'];
    $active = $variables['active'];
    $attributes = $variables['attributes'];

    $output = '<div class="nav">';
//    $output = '<div id="main-menu" class="navigation">';

    $output .= tchart_get_rendered_nav($type, $attributes, $active_id, $active, $items, '');

    $output .= '</div>';


    return $output;
}

/**
 * 递归输出ul,li菜单
 */
function tchart_get_rendered_nav($type, $attributes, $active_id, $active, $items, $type_id = '')
{
    $output = '';
    if (!empty($items)) {
        $output .= "<$type" . drupal_attributes($attributes) . '>';

        foreach ($items as $item) {
            $act_attributes = array();
            $children = array();
            $data = $item['data'];

            //如果是本term或者父term则添加类active
            if (in_array($item[$active_id], $active)) {
                $act_attributes['class'][] = 'active';
            }
            $act_attributes += $attributes;
            $output .= '<li ' . drupal_attributes($act_attributes) . '>' . l($data['title'], $data['link']) . "</li>\n";
            //存在子目录则继续渲染
            if (key_exists('children', $item)) {
                $output .= tchart_get_rendered_nav($type, $attributes, $active_id, $active, $item['children']);
            }
        }
        $output .= "</$type>";
    }
    return $output;
}

/**
 * 导航button菜单
 */
function theme_tchart_nav_button($variables)
{
    $items = $variables['items'];
    $active_id = $variables['active_id'];
    $active = $variables['active'];
    $attributes = $variables['attributes'];
    $output = '<div class="switch-btn">';
    if (!empty($items)) {

        foreach ($items as $item) {
            $act_attributes = array();
            $children = array();
            $data = $item['data'];

            //如果是本term或者父term则添加类active
            if (in_array($item[$active_id], $active)) {
                $act_attributes['class'][] = 'active';
            }
            $act_attributes += $attributes;
            $output .= '<button onclick="window.location.href=\'/' . $data['link'] . '\';"' . drupal_attributes($act_attributes) . '>' . $data['title'] . "</button>\n";

        }
    }
    $output .= '</div>';
    return $output;
}

/**
 * 表格样式
 */
function theme_tchart_report($variables)
{
    $header = $variables['header'];
    $items = $variables['items'];
    $date = $variables['date'];

    $output = '<style>
				.data-table{
					width: 800px;
					margin: 20px auto 0;
					border-radius: 10px;
				}
				.data-table table{
					width: 800px;
					text-align: center;
					border: 0;
					border-radius: 10px;

					background: #fff;
				}
				.data-table table tr{
					height: 40px;
					line-height: 40px;
					color:#BDBDBD;
					font-size: 13px;
				}
				.data-table table tr:first-child{
					background: #E8E8E8;
					font-weight: bold;
					color: #686868;
					font-size: 12px;
				}
			</style>';

    if (!empty($date)) {
        //渲染时间
        $output .= '<div class="data-table navtable">
				<table widh="100%" align="center" CELLSPACING="0" CELLPADDING="0">';

        $output .= '<tr>';
        foreach ($date as $date_link) {
            $output .= "<td class='$date_link[1]'>" . $date_link[0] . '</td>';
        }
        $output .= '</table>';
        $output .= '</div>';
    }

    //渲染表头

    $output .= '<div class="data-table">
				<table widh="100%" align="center" CELLSPACING="0" CELLPADDING="0">';

    $output .= '<tr>';
    foreach ($header as $one_head) {
        $output .= '<td>' . $one_head . '</td>';
    }
    $output .= '</tr>';
    //渲染数据
    foreach ($items as $entries) {
        $output .= '<tr>';
        foreach ($entries as $entry) {
            $output .= '<td>' . $entry . '</td>';
        }
        $output .= '</tr>';
    }
    $output .= '</table>';
    $output .= '</div>';

    $output .= '</div>';    //class "data-table"
    return $output;

}

//视频表格样式
function theme_tchart_video_report($variables)
{
    $video = $variables['video'];
    $form = $variables['form'];
    $output = '';
    $v_id = 0;
    foreach ($video as $_video) {
        $output .= "<video src=\"$_video\" width=\"800\" height=\"400\" class=\"video\" id=\"flood_video_$v_id\"controls=\"controls\" poster=\"/sites/all/themes/khtheme/img/bg.jpg\" style=\"display: none\"></video>";
        $v_id++;
    }
    $f_id = 0;
    foreach ($form['#items'] as &$item) {
        $item[0] = date('Y/m/d',strtotime($item[0]));
        $item[0] = "<button class =\"btn_time\" id=\"flood_video_$f_id\" >$item[0]</button>";
        $f_id++;
    }

    $output .= render($form);

    if ($v_id > 0) {
        $output .= "
        <script>
            jQuery(document).ready(function(){
                jQuery(\"#flood_video_0\").show();
                jQuery(\".btn_time\").click(function () {
                    jQuery(\".video\").each(function() {
                       jQuery(this).hide();
                       jQuery(this).trigger('pause');
                    });
                    var id = jQuery(this).attr(\"id\");
                    jQuery(\".video\").each(function() {
                        if(jQuery(this).attr(\"id\") == id){
                            jQuery(this).show();
                        }
                    });
                });
            });
        </script>";
    }
    return $output;
}

/**
 * 时间轴图标样式
 */
function theme_tchart_time_chart($variables)
{
    global $tchart_div_id;
    static $tchart_div_id = 0;
    $items = $variables['items'];
    $unit = $variables['unit'];
    $legend = $variables['legend'];
    $title = $variables['title'];
    if (array_key_exists('div_id', $variables) && !empty($variables['div_id'])) {
        $div_id = 'chart_' . $variables['div_id'];
    } else {
        $div_id = 'auto_chart_' . $tchart_div_id;
        $tchart_div_id++;
    }

    $output = '';

    //legend
    $legend_out = '[';
    foreach ($legend as $one_legend) {
        $legend_out .= "'" . $one_legend . "',";
    }
    $legend_out .= ']';

    //具体数据
    $series_out = '[';
    foreach ($items as $item) {
        $data_out = '';
        foreach ($item['data'] as $one_data) {
            $data_out .= 'd.push([new Date(' . ($one_data[0] * 1000) . '),' . $one_data[1] . ']);';
        }

        $series_out .= '{
            name: \'' . $item['name'] . '\',
            type: \'' . $item['type'] . '\',
            smooth: true,
            data: (function () {
                var d = [];
				' . $data_out . '
                return d;
            })()
        },';
    }
    $series_out .= ']';

    //加载js
    drupal_add_js(drupal_get_path('module', 'tchart') . '/echarts.common.min.js');
    $output .=
        '<div id="' . $div_id . '" style="width: 820px;height:400px;"></div>
    <script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById(\'' . $div_id . '\'));

        // 指定图表的配置项和数据
        var option = {
    title : {
        text : \'' . $title . '\',
//        subtext : \'dataZoom支持\'
    },
    tooltip : {
        trigger: \'axis\',
        formatter : function (params) {
            var date = new Date(params[0].value[0]);
            data = date.getFullYear() + \'-\'
                   + (date.getMonth() + 1) + \'-\'
                   + date.getDate() + \' \'
                   + date.getHours() + \':\'
                   + date.getMinutes();

			output = data + \'<br/>\';
			for(var i=0;i<params.length;i++){
	 			output += params[i].seriesName + " - " + params[i].value[1] + \'' . $unit['per'] . '\'+\'<br/>\';
	 		}
			return output;
        }
    },
    dataZoom: {
        show: true,
        start : 0
    },
    legend : {
        data : ' . $legend_out . '
    },
    xAxis : [
        {
            type : \'time\',
            splitNumber:10
        }
    ],
    yAxis : [
        {
            type : \'value\' ,
            name : \'' . $unit['unit'] . '\' ,
            axisLabel: {
            	formatter : \'{value}' . $unit['per'] . '\'
            }
        }
    ],
    series : ' . $series_out . '
};


        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
    </script>';
    return $output;
}

/**
 * 时间轴图标样式2
 */
function theme_tchart_time_chart2($variables)
{
    global $tchart_div_id;
    static $tchart_div_id = 0;
    $items = $variables['items'];
    $category = $variables['category'];
    $title = isset($variables['title']) ? $variables['title'] : " ";
    $height = isset($variables['height']) ? $variables['height'] : 400;

    if (array_key_exists('div_id', $variables) && !empty($variables['div_id'])) {
        $div_id = 'chart_' . $variables['div_id'];
    } else {
        $div_id = 'auto_chart_' . $tchart_div_id;
        $tchart_div_id++;
    }
    $chart_reference = 'myChart_' . $div_id;
    $option = _chart_option($variables['option']);

    $output = '';

    //timespan
    if (!isset($variables['timespan'])) {
        $timespan = $items['samplingtime'];
        foreach ($timespan as $key => $value) {
            $timespan[$key] = $option->timespan ? strtotime($value) : $value;
        }
        unset($items['sapmlingtime']);
        unset($category['samplingtime']);
    } else {
        $timespan = $variables['timespan'];
    }

    $xAxis_category = '[';
    foreach ($timespan as $_timespan) {
        $xAxis_category .= "'" . ($option->timespan ? date('Y/m/d', $_timespan) : $_timespan) . "',";
    }
    $xAxis_category .= ']';

    //legend
    $legend_out = '[';
    foreach ($category as $one_legend) {
        $legend_out .= "'" . $one_legend[0] . "',";
    }
    $legend_out .= ']';

    //具体数据
    $series_out = '[';
    foreach ($items as $key => $item) {
        if ($key == 'samplingtime') {
            continue;
        }

        $data_out = '';
        $count_cate = 0;
        reset($category);
        foreach ($item as $item_key => $one_data) {
            //x为非时间类目轴,交替输出单位
            if ($option->x_is_category) {
                $x_unit = current($category);
                $data_out .= '[' . ($option->reverse ? $one_data : $count_cate) . ',' . ($option->reverse ? $count_cate : $one_data) . ',\'' . (isset($x_unit[1]) ? $x_unit[1] : " ") . '\'],';
                next($category);
            } else {
                $data_out .= '[' . ($option->reverse ? $one_data : $count_cate) . ',' . ($option->reverse ? $count_cate : $one_data) . ',\'' . (isset($category[$key][1]) ? $category[$key][1] : " ") . '\'],';
            }
            $count_cate++;
        }


        $series_out .= '{
            name: \'' . (isset($category[$key][0]) ? $category[$key][0] : '' ) . '\',
            type: \'' . (isset($category[$key][2]) ? $category[$key][2] : 'bar') . '\',
            data: [' . $data_out . '],' .
            (isset($option->series_option[$key]) ? $option->series_option[$key] : "")
            . '
        },';
    }
    $series_out .= ']';


    $formatter = 'function (params) {
            if(params[0]==null){
                return (params.data[0].cast);
            }
			output = params[0].name + \'<br/>\';
			for(var i=0;i<params.length;i++){
	 			output += params[i].seriesName + " : " + params[i].value[' . ($option->reverse ? '0' : '1') . '] + params[i].value[2] +\'<br/>\';
	 		}
			return output;
        }';


    $output .=
        '<div id="' . $div_id . '" style="width: 820px;height:' . $height . 'px;"></div>
    <script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        ' . $chart_reference . ' = echarts.init(document.getElementById(\'' . $div_id . '\'));

        // 指定图表的配置项和数据
        var option = {
    title : {
        text : \'' . $title . '\',
    },
    tooltip : {
        trigger: \'axis\',
        formatter : ' . $formatter . '
    },
    ' . ($option->show_zoom ? ('dataZoom: {
        show: true,
        start : 0,
        orient : \'' . ($option->reverse ? 'vertical' : 'horizontal') . '\'
    },') : '') . '
    legend : {
        data : ' . $legend_out . ',
        top : 20 ,' .
        $option->legend_option
        . '

    },
    ' . ($option->reverse ? 'y' : 'x') . 'Axis : [
        {
            type : \'category\',
            data : ' . $xAxis_category . ',
            ' . $option->xAxis_option . '
        },' .
        $option->xAxis_extra
        . '
    ],
    ' . ($option->reverse ? 'x' : 'y') . 'Axis : [
        {
            type : \'value\' ,
            name : \'' . $option->yAxis_unit . '\' ,
            axisLabel: {
            	formatter : \'{value}' . $option->yAxis_per . '\'
            },
            ' . $option->yAxis_option . '
        },
        ' .
        $option->yAxis_extra
        . '
    ],
    series : ' . $series_out . '
};


        // 使用刚指定的配置项和数据显示图表。
        ' . $chart_reference . '.setOption(option);
        ' . $chart_reference . '.group = \'' . $option->chart_connect . '\';
    </script>';
    //存储图标关联组
    if ($option->chart_connect != 'none_connect') {
        global $chart_connect;
        $chart_connect[$option->chart_connect][] = $chart_reference;
    }
    return $output;
}

//多图联动补完js
function theme_tchart_connect($variables)
{
    return _get_chart_connect();
}

/**
 * 照片墙样式
 */
function theme_tchart_photo_wall($variables)
{
    $items = $variables['items'];
    $image_style = $variables['image_style'];
    if (empty($items)) {
        return '';
    }
    $output = '<style></style>
			<script type="text/javascript">
				jQuery(function(){
					var len=jQuery("#img-inner").children().length-3;
					jQuery("#img-inner").css("width",270*(len+3)-10+"px");
					jQuery("#img-inner").find(">div:last").css("margin-right","0px");
					if(len<0){
					        jQuery("#img-inner").css("left",-270*len*0.5+"px");
					}
					jQuery(".btn-right").click(function(){
						jQuery("#img-inner").stop(true,true);
						animater(len);
					});
					jQuery(".btn-left").click(function(){
						jQuery("#img-inner").stop(true,true);
						animatel(len);
					});
					function animatel(len){
						var l;
						if(len<=0){
						  return;
						}
						if(jQuery("#img-inner").position().left==0){
                            l = -270*len;
						}else{
							l = jQuery("#img-inner").position().left + 270;
						}
						jQuery("#img-inner").animate({left:l+"px"});
					}
					function animater(len){
						var l;
						if(len<=0){
						  return;
						}
						if(jQuery("#img-inner").position().left==-270*len){
						    l = 0;
						}else{
							l = jQuery("#img-inner").position().left - 270;
						}

						jQuery("#img-inner").animate({left:l+"px"});
					}
				});
			</script>';
    $output .= '<div class="img-container">';
    $output .= '<div id="img-inner">';


    $count_times = 0;
    if (!key_exists($image_style, image_styles())) {
        $image_style = key(image_styles());
    }

    $i = 1;
    foreach ($items as $item) {
        $output .= '<div class="imgblock img' . $i . '">';
        $output .= '<a href="' . '/node/' . $item->nid . '"><img src="' . image_style_url($image_style, $item->uri) . '"></a>';
        $output .= '</div>';

        $i++;
        $count_times++;
        $i = $i > 6 ? 1 : $i;
    }

    $output .= '</div>'; //id img-inner

    $output .= '<div class="btn-left"><img src="/' . drupal_get_path('theme', 'khtheme') . '/img/left.png" /></div>
				<div class="btn-right"><img src="/' . drupal_get_path('theme', 'khtheme') . '/img/right.png" /></div>';
    $output .= '</div>'; //class img-container
    return $output;

}


function tchart_page_build()
{
    drupal_add_css(drupal_get_path('module', 'tchart') . '/css/tchart.css', array(
        'group' => CSS_DEFAULT,
        'every_page' => TRUE
    ));
}

